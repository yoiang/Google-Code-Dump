// Created by Microsoft (R) C/C++ Compiler Version 12.00.8168.0 (1097155c).
//
// Nsdpgp2.tli
//
// Wrapper implementations for Win32 type library C:\WINNT\System32\Nsdpgp2.dll
// compiler-generated file created 07/16/02 at 14:32:12 - DO NOT EDIT!

#pragma once

//
// interface IPGP wrapper method implementations
//

inline HRESULT IPGP::ConvEncryptFile ( enum ALGORITHM cipher, _bstr_t infile, _bstr_t outfile, _bstr_t passphrase ) {
    HRESULT _hr = raw_ConvEncryptFile(cipher, infile, outfile, passphrase);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPGP::EncryptFile ( _bstr_t rcptkeyid, _bstr_t infile, _bstr_t outfile, _bstr_t pubkeyring, _bstr_t privkeyring ) {
    HRESULT _hr = raw_EncryptFile(rcptkeyid, infile, outfile, pubkeyring, privkeyring);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPGP::EncryptAndSignFile ( enum HASH alg, _bstr_t rcptkeyid, _bstr_t signkeyid, _bstr_t passphrase, _bstr_t infile, _bstr_t outfile, _bstr_t pubkeyring, _bstr_t privkeyring ) {
    HRESULT _hr = raw_EncryptAndSignFile(alg, rcptkeyid, signkeyid, passphrase, infile, outfile, pubkeyring, privkeyring);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPGP::DecryptFile ( _bstr_t siginfofile, _bstr_t infile, _bstr_t outfile, _bstr_t passphrase, _bstr_t pubkeyring, _bstr_t privkeyring ) {
    HRESULT _hr = raw_DecryptFile(siginfofile, infile, outfile, passphrase, pubkeyring, privkeyring);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPGP::ClearSignFile ( enum HASH alg, _bstr_t signkeyid, _bstr_t passphrase, _bstr_t infile, _bstr_t outfile, _bstr_t pubkeyring, _bstr_t privkeyring ) {
    HRESULT _hr = raw_ClearSignFile(alg, signkeyid, passphrase, infile, outfile, pubkeyring, privkeyring);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPGP::OpaqueSignFile ( enum HASH alg, _bstr_t signkeyid, _bstr_t passphrase, _bstr_t infile, _bstr_t outfile, _bstr_t pubkeyring, _bstr_t privkeyring ) {
    HRESULT _hr = raw_OpaqueSignFile(alg, signkeyid, passphrase, infile, outfile, pubkeyring, privkeyring);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPGP::SignFile ( enum HASH alg, _bstr_t signkeyid, _bstr_t passphrase, _bstr_t infile, _bstr_t sigfile, _bstr_t pubkeyring, _bstr_t privkeyring ) {
    HRESULT _hr = raw_SignFile(alg, signkeyid, passphrase, infile, sigfile, pubkeyring, privkeyring);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPGP::VerifySignedFile ( _bstr_t siginfofile, _bstr_t infile, _bstr_t pubkeyring, _bstr_t privkeyring ) {
    HRESULT _hr = raw_VerifySignedFile(siginfofile, infile, pubkeyring, privkeyring);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPGP::VerifyFile ( _bstr_t siginfofile, _bstr_t infile, _bstr_t sigfile, _bstr_t pubkeyring, _bstr_t privkeyring ) {
    HRESULT _hr = raw_VerifyFile(siginfofile, infile, sigfile, pubkeyring, privkeyring);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPGP::WipeFile ( _bstr_t infile ) {
    HRESULT _hr = raw_WipeFile(infile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPGP::ConvEncryptString ( enum ALGORITHM cipher, _bstr_t passphrase, _bstr_t inputstring ) {
    BSTR _result;
    HRESULT _hr = raw_ConvEncryptString(cipher, passphrase, inputstring, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IPGP::EncryptString ( _bstr_t pubkeyring, _bstr_t privkeyring, _bstr_t rcptkeyid, _bstr_t inputstring ) {
    BSTR _result;
    HRESULT _hr = raw_EncryptString(pubkeyring, privkeyring, rcptkeyid, inputstring, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IPGP::DecryptString ( _bstr_t pubkeyring, _bstr_t privkeyring, _bstr_t passphrase, _bstr_t inputstring ) {
    BSTR _result;
    HRESULT _hr = raw_DecryptString(pubkeyring, privkeyring, passphrase, inputstring, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IPGP::GetKeyIDFromUserID ( _bstr_t pubkeyring, _bstr_t privkeyring, _bstr_t userid ) {
    BSTR _result;
    HRESULT _hr = raw_GetKeyIDFromUserID(pubkeyring, privkeyring, userid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IPGP::GenerateKey ( enum KEYTYPE keyalg, int bits, _bstr_t name, _bstr_t passphrase, _bstr_t pubkeyring, _bstr_t privkeyring ) {
    HRESULT _hr = raw_GenerateKey(keyalg, bits, name, passphrase, pubkeyring, privkeyring);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPGP::ImportKeyFromFile ( _bstr_t infile, _bstr_t pubkeyring, _bstr_t privkeyring ) {
    HRESULT _hr = raw_ImportKeyFromFile(infile, pubkeyring, privkeyring);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPGP::ImportKeyFromKeyServer ( _bstr_t userid, _bstr_t keyserver, _bstr_t pubkeyring, _bstr_t privkeyring ) {
    HRESULT _hr = raw_ImportKeyFromKeyServer(userid, keyserver, pubkeyring, privkeyring);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPGP::ExportKeyToFile ( _bstr_t keyid, _bstr_t outfile, _bstr_t pubkeyring, _bstr_t privkeyring ) {
    HRESULT _hr = raw_ExportKeyToFile(keyid, outfile, pubkeyring, privkeyring);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
